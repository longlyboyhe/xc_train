<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator          |
    |              on 2018-06-22 20:39:46              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
 goto hEc8e; MfTTP: define("\110\124\x54\x50\x5f\x50\x52\117\x58\131\x5f\111\x50", "\x31\62\x37\56\x30\x2e\x30\x2e\x31"); goto bh22G; PmZVq: class Credential { private $dateTimeFormat = "\131\55\x6d\55\x64\x5c\124\110\72\151\x3a\163\x5c\132"; private $refreshDate; private $expiredDate; private $accessKeyId; private $accessSecret; private $securityToken; function __construct($accessKeyId, $accessSecret) { goto zwd0p; zwd0p: $this->accessKeyId = $accessKeyId; goto nX_D1; nX_D1: $this->accessSecret = $accessSecret; goto l1jSJ; l1jSJ: $this->refreshDate = date($this->dateTimeFormat); goto geGTh; geGTh: } public function isExpired() { goto vZeTL; MxDS1: return false; goto B8ayO; qGM6M: nsd19: goto aDxcN; aDxcN: return true; goto sKRKV; vZeTL: if (!($this->expiredDate == null)) { goto QIjjO; } goto MxDS1; HOgXo: return false; goto qGM6M; YeFsM: if (!(strtotime($this->expiredDate) > date($this->dateTimeFormat))) { goto nsd19; } goto HOgXo; B8ayO: QIjjO: goto YeFsM; sKRKV: } public function getRefreshDate() { return $this->refreshDate; } public function getExpiredDate() { return $this->expiredDate; } public function setExpiredDate($expiredHours) { goto u4pTE; lYfBJ: return $this->expiredDate = date($this->dateTimeFormat, strtotime("\53" . $expiredHours . "\40\x68\157\x75\162")); goto WOiuc; WOiuc: fLEuV: goto IJpry; u4pTE: if (!($expiredHours > 0)) { goto fLEuV; } goto lYfBJ; IJpry: } public function getAccessKeyId() { return $this->accessKeyId; } public function setAccessKeyId($accessKeyId) { $this->accessKeyId = $accessKeyId; } public function getAccessSecret() { return $this->accessSecret; } public function setAccessSecret($accessSecret) { $this->accessSecret = $accessSecret; } } goto RQrDZ; V1T3Q: class xcHttpResponse { private $body; private $status; public function getBody() { return $this->body; } public function setBody($body) { $this->body = $body; } public function getStatus() { return $this->status; } public function setStatus($status) { $this->status = $status; } public function isSuccess() { goto JaQH5; r8cG_: return false; goto YkVJr; JaQH5: if (!(200 <= $this->status && 300 > $this->status)) { goto cHS9Y; } goto VYCZK; LBALV: cHS9Y: goto r8cG_; VYCZK: return true; goto LBALV; YkVJr: } } goto mR4rI; Btj2f: class xcap_SmsDemo { static $acsClient = null; public static function getAcsClient($AccessKeyId, $AccessKeySecret) { goto dSCha; dSCha: $product = "\x44\171\x73\x6d\x73\141\160\151"; goto u3FyU; u3FyU: $domain = "\144\171\x73\155\x73\141\x70\x69\56\141\x6c\151\171\x75\156\x63\163\56\x63\157\x6d"; goto p6ADl; Nu2nk: $endPointName = "\x63\156\x2d\x68\x61\x6e\147\x7a\150\x6f\165"; goto MPsVm; MPsVm: if (!(static::$acsClient == null)) { goto RpCew; } goto Jzmxr; U83iZ: static::$acsClient = new DefaultAcsClient($profile); goto JoVeW; eSQac: return static::$acsClient; goto j1il0; oW6w3: DefaultProfile::addEndpoint($endPointName, $region, $product, $domain); goto U83iZ; Jzmxr: $profile = DefaultProfile::getProfile($region, $accessKeyId, $accessKeySecret); goto oW6w3; p6ADl: $accessKeyId = $AccessKeyId; goto H1tBw; QBe7_: $region = "\x63\x6e\x2d\150\141\x6e\147\x7a\150\157\x75"; goto Nu2nk; JoVeW: RpCew: goto eSQac; H1tBw: $accessKeySecret = $AccessKeySecret; goto QBe7_; j1il0: } public static function sendSms($AccessKeyId, $AccessKeySecret, $signName, $templateCode, $phoneNumbers, $templateParam = null, $outId = null, $smsUpExtendCode = null) { goto YJ3yM; KkESe: $request->setSmsUpExtendCode($smsUpExtendCode); goto bS1Oa; vfWDy: if (!$outId) { goto ul02D; } goto D_TdL; BHLqI: $request->setPhoneNumbers($phoneNumbers); goto liWVa; WyZvU: if (!$templateParam) { goto VH1X9; } goto F9XbW; ARsvS: return $acsResponse; goto eBRkE; UxDRO: if (!$smsUpExtendCode) { goto S6rH6; } goto KkESe; VdOUV: ul02D: goto UxDRO; ESAhU: VH1X9: goto vfWDy; liWVa: $request->setSignName($signName); goto WwFhW; D_TdL: $request->setOutId($outId); goto VdOUV; WwFhW: $request->setTemplateCode($templateCode); goto WyZvU; Uypol: $acsResponse = static::getAcsClient($AccessKeyId, $AccessKeySecret)->getAcsResponse($request); goto ARsvS; YJ3yM: $request = new SendSmsRequest(); goto BHLqI; F9XbW: $request->setTemplateParam(json_encode($templateParam)); goto ESAhU; bS1Oa: S6rH6: goto Uypol; eBRkE: } public function queryDetails($phoneNumbers, $sendDate, $pageSize = 10, $currentPage = 1, $bizId = null) { goto SrUL3; tJefb: $request->setCurrentPage($currentPage); goto xt7v2; FN1aw: return $acsResponse; goto ef8UY; xt7v2: $acsResponse = static::getAcsClient()->getAcsResponse($request); goto FN1aw; O9G1j: $request->setPhoneNumber($phoneNumbers); goto br9nw; CjuKr: $request->setPageSize($pageSize); goto tJefb; br9nw: $request->setBizId($bizId); goto QIYdx; QIYdx: $request->setSendDate($sendDate); goto CjuKr; SrUL3: $request = new QuerySendDetailsRequest(); goto O9G1j; ef8UY: } } goto TSAOl; W3ZB5: class DefaultAcsClient implements IAcsClient { public $iClientProfile; public $__urlTestFlag__; function __construct($iClientProfile) { $this->iClientProfile = $iClientProfile; $this->__urlTestFlag__ = false; } public function getAcsResponse($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { goto PEGlR; t3YMj: $this->buildApiException($respObject, $httpResponse->getStatus()); goto e5zhh; qnBpc: $respObject = $this->parseAcsResponse($httpResponse->getBody(), $request->getAcceptFormat()); goto pNRCU; pNRCU: if (!(false == $httpResponse->isSuccess())) { goto Pk7H1; } goto t3YMj; PEGlR: $httpResponse = $this->doActionImpl($request, $iSigner, $credential, $autoRetry, $maxRetryNumber); goto qnBpc; X8w32: return $respObject; goto QfgIS; e5zhh: Pk7H1: goto X8w32; QfgIS: } private function doActionImpl($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { goto on4sX; inMzK: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getContent(), $request->getHeaders()); goto dVgzj; imrTt: return $httpResponse; goto FWTsK; TVArq: NvfE1: goto hvNrO; dVgzj: goto PczGD; goto G8ats; En2ty: $httpResponse = HttpHelper::curl($requestUrl, $request->getDomainParameter(), $request->getHeaders()); goto M1HGp; M1HGp: nCDe8: goto A444j; cVi88: CCvB0: goto RjWxx; G8ats: C2lyT: goto Ew5mT; N10zE: throw new ClientException($requestUrl, "\125\122\x4c\124\x65\163\164\x46\x6c\141\x67\x49\163\x53\x65\164"); goto cVi88; rXCmQ: $requestUrl = $request->composeUrl($iSigner, $credential, $domain); goto N7kkw; Dr48i: xX3Qg: goto En2ty; KQe8e: throw new ClientException("\x43\141\156\40\156\x6f\x74\x20\x66\x69\156\x64\x20\x65\x6e\x64\x70\x6f\x69\x6e\x74\40\164\157\x20\141\x63\143\145\163\x73\56", "\123\104\x4b\x2e\x49\156\166\x61\154\x69\x64\122\145\x67\151\157\156\111\x64"); goto tyD_Z; Ew5mT: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getDomainParameter(), $request->getHeaders()); goto meSji; meSji: PczGD: goto eg_ep; Dhapd: RUAih: goto AcBsX; LW9DJ: if (count($request->getDomainParameter()) > 0) { goto xX3Qg; } goto VIrRv; aRTQB: LZoI9: goto imrTt; z6CyF: Vz4r2: goto GDCiR; eg_ep: $retryTimes = 1; goto TVArq; N7kkw: if (!$this->__urlTestFlag__) { goto CCvB0; } goto N10zE; on4sX: if (!(null == $this->iClientProfile && (null == $iSigner || null == $credential || null == $request->getRegionId() || null == $request->getAcceptFormat()))) { goto RUAih; } goto VwpaI; RjWxx: if (count($request->getDomainParameter()) > 0) { goto C2lyT; } goto inMzK; VwpaI: throw new ClientException("\x4e\157\x20\141\x63\164\151\x76\x65\x20\160\162\x6f\146\x69\154\x65\x20\146\157\165\x6e\x64\56", "\x53\104\x4b\x2e\x49\156\166\141\154\x69\x64\x50\162\157\146\x69\x6c\x65"); goto Dhapd; X7Ujq: Z0moF: goto yFglI; DCSKm: $requestUrl = $request->composeUrl($iSigner, $credential, $domain); goto LW9DJ; yFglI: if (!(null == $credential)) { goto Vz4r2; } goto gSb2p; zrhNo: goto NvfE1; goto aRTQB; AcBsX: if (!(null == $iSigner)) { goto Z0moF; } goto ZWEPT; ox7rN: goto nCDe8; goto Dr48i; GDCiR: $request = $this->prepareRequest($request); goto GyZM1; UN3do: if (!(null == $domain)) { goto Y_Y4v; } goto KQe8e; VIrRv: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getContent(), $request->getHeaders()); goto ox7rN; GyZM1: $domain = EndpointProvider::findProductDomain($request->getRegionId(), $request->getProduct()); goto UN3do; A444j: $retryTimes++; goto zrhNo; gSb2p: $credential = $this->iClientProfile->getCredential(); goto z6CyF; hvNrO: if (!(500 <= $httpResponse->getStatus() && $autoRetry && $retryTimes < $maxRetryNumber)) { goto LZoI9; } goto DCSKm; ZWEPT: $iSigner = $this->iClientProfile->getSigner(); goto X7Ujq; tyD_Z: Y_Y4v: goto rXCmQ; FWTsK: } public function doAction($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { trigger_error("\x64\157\x41\143\x74\151\157\x6e\x28\x29\x20\151\163\x20\144\145\x70\x72\145\143\x61\164\x65\x64\56\40\x50\154\x65\141\163\145\x20\165\x73\145\40\147\145\164\x41\x63\x73\122\x65\163\x70\x6f\x6e\163\145\50\x29\40\x69\x6e\163\x74\145\141\x64\56", E_USER_NOTICE); return $this->doActionImpl($request, $iSigner, $credential, $autoRetry, $maxRetryNumber); } private function prepareRequest($request) { goto pyXly; PIely: $request->setAcceptFormat($this->iClientProfile->getFormat()); goto U2pqm; T9aXk: if (!(null == $request->getMethod())) { goto o4OQW; } goto IdXBj; bS3hd: o4OQW: goto G6DHL; pyXly: if (!(null == $request->getRegionId())) { goto aJJAZ; } goto iVXz5; U2pqm: BwoRj: goto T9aXk; wdm82: if (!(null == $request->getAcceptFormat())) { goto BwoRj; } goto PIely; IdXBj: $request->setMethod("\x47\105\124"); goto bS3hd; G6DHL: return $request; goto y8h_y; iVXz5: $request->setRegionId($this->iClientProfile->getRegionId()); goto fqRs0; fqRs0: aJJAZ: goto wdm82; y8h_y: } private function buildApiException($respObject, $httpStatus) { throw new ServerException($respObject->Message, $respObject->Code, $httpStatus, $respObject->RequestId); } private function parseAcsResponse($body, $format) { goto SN5VX; YGOv1: glUEp: goto kS1O_; BJFw5: return $respObject; goto yss_u; r0pEU: if ("\130\115\x4c" == $format) { goto QGbay; } goto KVajs; KVajs: if (!("\122\101\x57" == $format)) { goto D4qLE; } goto Jpudg; Jpudg: $respObject = $body; goto OP_eh; CxPou: i3yx1: goto BJFw5; kS1O_: $respObject = json_decode($body); goto CxPou; SN5VX: if ("\x4a\123\117\116" == $format) { goto glUEp; } goto r0pEU; OP_eh: D4qLE: goto kzlIn; UFdmI: goto i3yx1; goto YGOv1; bFmGG: Ak8gv: goto UFdmI; zTQ7M: QGbay: goto W9EHF; W9EHF: $respObject = @simplexml_load_string($body); goto bFmGG; kzlIn: goto Ak8gv; goto zTQ7M; yss_u: } } goto f07vT; ulhUs: define("\x45\x4e\x41\102\114\105\137\x48\x54\124\x50\137\x50\x52\117\130\x59", FALSE); goto MfTTP; Gaodj: class SendSmsRequest extends RpcAcsRequest { public function __construct() { parent::__construct("\x44\171\163\x6d\x73\141\x70\151", "\x32\60\61\x37\x2d\60\x35\55\x32\x35", "\x53\x65\156\144\123\x6d\163"); $this->setMethod("\120\117\x53\x54"); } private $templateCode; private $phoneNumbers; private $signName; private $resourceOwnerAccount; private $templateParam; private $resourceOwnerId; private $ownerId; private $outId; private $smsUpExtendCode; public function getTemplateCode() { return $this->templateCode; } public function setTemplateCode($templateCode) { $this->templateCode = $templateCode; $this->queryParameters["\x54\x65\x6d\160\154\x61\x74\145\x43\157\144\145"] = $templateCode; } public function getPhoneNumbers() { return $this->phoneNumbers; } public function setPhoneNumbers($phoneNumbers) { $this->phoneNumbers = $phoneNumbers; $this->queryParameters["\120\x68\157\156\145\116\x75\155\x62\x65\x72\x73"] = $phoneNumbers; } public function getSignName() { return $this->signName; } public function setSignName($signName) { $this->signName = $signName; $this->queryParameters["\x53\151\147\156\x4e\x61\155\145"] = $signName; } public function getResourceOwnerAccount() { return $this->resourceOwnerAccount; } public function setResourceOwnerAccount($resourceOwnerAccount) { $this->resourceOwnerAccount = $resourceOwnerAccount; $this->queryParameters["\122\145\x73\157\x75\162\x63\x65\117\167\156\145\x72\101\x63\143\157\165\156\x74"] = $resourceOwnerAccount; } public function getTemplateParam() { return $this->templateParam; } public function setTemplateParam($templateParam) { $this->templateParam = $templateParam; $this->queryParameters["\x54\145\x6d\x70\x6c\141\164\x65\120\141\162\141\155"] = $templateParam; } public function getResourceOwnerId() { return $this->resourceOwnerId; } public function setResourceOwnerId($resourceOwnerId) { $this->resourceOwnerId = $resourceOwnerId; $this->queryParameters["\122\145\163\157\165\x72\143\x65\117\x77\156\145\x72\x49\144"] = $resourceOwnerId; } public function getOwnerId() { return $this->ownerId; } public function setOwnerId($ownerId) { $this->ownerId = $ownerId; $this->queryParameters["\117\x77\x6e\x65\x72\x49\x64"] = $ownerId; } public function getOutId() { return $this->outId; } public function setOutId($outId) { $this->outId = $outId; $this->queryParameters["\117\x75\x74\111\x64"] = $outId; } public function getSmsUpExtendCode() { return $this->smsUpExtendCode; } public function setSmsUpExtendCode($smsUpExtendCode) { $this->smsUpExtendCode = $smsUpExtendCode; $this->queryParameters["\123\155\x73\125\x70\x45\x78\x74\145\156\144\103\x6f\x64\145"] = $smsUpExtendCode; } } goto Btj2f; wa__m: $endpoints = array(); goto f_crN; hMECC: $xml = simplexml_load_string(file_get_contents($endpoint_filename)); goto fE6F_; aBzWA: header("\103\x6f\x6e\164\x65\156\x74\55\124\x79\x70\145\72\40\x74\x65\170\164\x2f\x70\x6c\141\151\156\73\40\143\x68\x61\162\163\145\x74\75\x75\x74\146\55\70"); goto yTu9N; f07vT: class Endpoint { private $name; private $regionIds; private $productDomains; function __construct($name, $regionIds, $productDomains) { goto ykTMd; O1a3H: $this->regionIds = $regionIds; goto rh2e3; ykTMd: $this->name = $name; goto O1a3H; rh2e3: $this->productDomains = $productDomains; goto ZqkwW; ZqkwW: } public function getName() { return $this->name; } public function setName($name) { $this->name = $name; } public function getRegionIds() { return $this->regionIds; } public function setRegionIds($regionIds) { $this->regionIds = $regionIds; } public function getProductDomains() { return $this->productDomains; } public function setProductDomains($productDomains) { $this->productDomains = $productDomains; } } goto uhXk2; YNA7E: interface IAcsClient { public function doAction($requst); } goto W3ZB5; p04Px: class LibcurlWrapper { private $curlMultiHandle; private $curlHandleInfo; private $idleCurlHandle; public function __construct() { $this->curlMultiHandle = curl_multi_init(); $this->idleCurlHandle = array(); } public function __destruct() { goto tVBfA; tVBfA: curl_multi_close($this->curlMultiHandle); goto XlFWB; XlFWB: foreach ($this->idleCurlHandle as $handle) { curl_close($handle); G9Tbu: } goto Y0qvs; Y0qvs: wvazK: goto OYDCI; OYDCI: $this->idleCurlHandle = array(); goto JK8HC; JK8HC: } public function startSendingRequest($httpRequest, $done) { goto MCcfe; jo2dZ: yTSVt: goto rxbPK; GF2uP: curl_setopt($curlHandle, CURLOPT_POSTFIELDS, $arr[1]); goto LYKaK; K5mqz: return false; goto Xb3p1; uapNY: $curlHandle = array_pop($this->idleCurlHandle); goto jo2dZ; NLsYw: if (!($httpRequest->method === "\120\117\123\x54")) { goto YwLUk; } goto Vaiyp; EAcem: curl_multi_add_handle($this->curlMultiHandle, $curlHandle); goto ZW5wF; Vkcvb: $curlHandle = curl_init(); goto o4iWX; Q7WyI: goto yTSVt; goto mX6Zd; eoFwl: array_push($headers, "\103\157\x6e\x74\x65\156\x74\55\124\x79\x70\145\x3a\x20\155\x75\154\x74\x69\160\141\x72\164\x2f\x66\x6f\x72\155\55\x64\x61\164\x61\x3b\x20\142\157\165\156\x64\141\x72\x79\x3d" . $arr[0]); goto GF2uP; WMLE5: array_push($headers, "\x55\x73\x65\162\x2d\x41\x67\x65\x6e\x74\x3a" . Conf::getUserAgent()); goto NLsYw; HFnhz: $this->curlHandleInfo[$curlHandle]["\162\x65\161\165\x65\163\x74"] = $httpRequest; goto e1cnf; Xb3p1: F_MFc: goto Q7WyI; ddOeJ: curl_setopt($curlHandle, CURLOPT_URL, $httpRequest->url); goto QmNj4; mX6Zd: sdEaw: goto uapNY; qkKnJ: curl_setopt($curlHandle, CURLOPT_HTTPHEADER, $headers); goto EAcem; LYKaK: YwLUk: goto qkKnJ; ptlzJ: $headers = $httpRequest->customHeaders; goto WMLE5; rxbPK: curl_setopt($curlHandle, CURLOPT_TIMEOUT_MS, $httpRequest->timeoutMs); goto ddOeJ; IXXdb: ys8H6: goto F6dpA; QmNj4: curl_setopt($curlHandle, CURLOPT_HEADER, 1); goto WgWhT; RflvX: array_push($headers, "\x45\x78\x70\145\143\x74\x3a\x20\x31\x30\60\55\143\x6f\156\164\151\156\x75\145"); goto eoFwl; MCcfe: if (count($this->idleCurlHandle) !== 0) { goto sdEaw; } goto Vkcvb; o4iWX: if (!($curlHandle === false)) { goto F_MFc; } goto K5mqz; W9nLd: $arr = buildCustomPostFields($httpRequest->dataToPost); goto RflvX; Vaiyp: if (!defined("\103\125\122\114\117\120\124\137\123\101\x46\105\x5f\125\120\x4c\117\x41\104")) { goto ys8H6; } goto DVWvn; DVWvn: curl_setopt($curlHandle, CURLOPT_SAFE_UPLOAD, true); goto IXXdb; ZW5wF: $this->curlHandleInfo[$curlHandle]["\x64\x6f\x6e\145"] = $done; goto HFnhz; WgWhT: curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, 1); goto ptlzJ; F6dpA: curl_setopt($curlHandle, CURLOPT_POST, true); goto W9nLd; e1cnf: } public function performSendingRequest() { goto yk9oT; MXTdN: $info = curl_multi_info_read($this->curlMultiHandle); goto m1f4C; hLKsm: usleep(1); goto xsh9a; K03qY: $info = curl_multi_info_read($this->curlMultiHandle); goto MvZKE; T7j6s: $this->processResult($info); goto QwG14; kGCiH: vdobF: goto nq9ph; UGQSk: inwTh: goto zA6Oo; jy0p4: $this->processResult($info); goto PzrEX; T5YfX: if (!(count($this->curlHandleInfo) == 0)) { goto RfDr6; } goto nO7Hb; za9z5: $active = null; goto UGQSk; K3HEG: goto Ze8uY; goto yQ_Yu; Un6ni: Ze8uY: goto Al2Vd; G1X7m: XdpdF: goto K3HEG; m1f4C: if (!($info !== false)) { goto zcWoM; } goto T7j6s; UHrs0: if ($mrc == CURLM_CALL_MULTI_PERFORM) { goto vdobF; } goto G1X7m; f5ZTT: if (!(curl_multi_select($this->curlMultiHandle) == -1)) { goto uggfe; } goto hLKsm; fUzWO: pQlhu: goto Un6ni; xsh9a: uggfe: goto kGCiH; QwG14: zcWoM: goto lAzPH; nO7Hb: goto P8edd; goto zCh_t; zA6Oo: $mrc = curl_multi_exec($this->curlMultiHandle, $active); goto MXTdN; PzrEX: ClFhN: goto UHrs0; lAzPH: if ($mrc == CURLM_CALL_MULTI_PERFORM) { goto inwTh; } goto fUzWO; zpoxY: P8edd: goto GNyhE; yk9oT: QdmcM: goto za9z5; nq9ph: $mrc = curl_multi_exec($this->curlMultiHandle, $active); goto K03qY; yQ_Yu: gHCoH: goto T5YfX; zCh_t: RfDr6: goto Ml0FJ; MvZKE: if (!($info !== false)) { goto ClFhN; } goto jy0p4; Al2Vd: if (!($active && $mrc == CURLM_OK)) { goto gHCoH; } goto f5ZTT; Ml0FJ: iIFvg: goto AdZKa; AdZKa: goto QdmcM; goto zpoxY; GNyhE: } private function processResult($info) { goto Mg0hX; ThiKo: if ($result !== CURLE_OK) { goto Tsbm1; } goto ayGr3; EphP5: ESxlN: goto erqqO; qitQL: $response->curlErrorMessage = curl_error($handle); goto HFqK0; eR5GJ: unset($this->curlHandleInfo[$handle]); goto aggnn; Scigw: $response = new HttpResponse(); goto ThiKo; efzXm: foreach ($headLines as $head) { goto noLqU; VUbd2: hzjhe: goto SiYiM; SiYiM: BcG5x: goto baPG8; noLqU: $arr = explode("\72", $head); goto Bo9D1; NQtsx: $response->headers[trim($arr[0])] = trim($arr[1]); goto VUbd2; Bo9D1: if (!(count($arr) >= 2)) { goto hzjhe; } goto NQtsx; baPG8: } goto EphP5; ZJpap: call_user_func($done, $request, $response); goto BNc23; NrcL_: goto vd8Mv; goto cH4Y5; ajyaQ: $headerSize = curl_getinfo($handle, CURLINFO_HEADER_SIZE); goto KFky6; HpXq_: $request = $this->curlHandleInfo[$handle]["\x72\145\161\x75\x65\x73\x74"]; goto N8FTH; IA9do: $response->curlErrorMessage = curl_error($handle); goto ZJpap; QNS9X: array_push($this->idleCurlHandle, $handle); goto BkCFz; ayGr3: $responseStr = curl_multi_getcontent($handle); goto ajyaQ; Mg0hX: $result = $info["\162\x65\163\x75\154\x74"]; goto QoT5o; cH4Y5: Tsbm1: goto BZAVq; N8FTH: $done = $this->curlHandleInfo[$handle]["\x64\x6f\156\x65"]; goto Scigw; KFky6: $headerStr = substr($responseStr, 0, $headerSize); goto ullMD; PwMBp: $headLines = explode("\15\xa", $headerStr); goto efzXm; BZAVq: $response->curlErrorCode = $result; goto IA9do; QoT5o: $handle = $info["\150\x61\x6e\144\x6c\145"]; goto HpXq_; vKhWX: call_user_func($done, $request, $response); goto NrcL_; dNGOP: $response->curlErrorCode = curl_errno($handle); goto qitQL; erqqO: $response->body = $body; goto vKhWX; BNc23: vd8Mv: goto eR5GJ; aggnn: curl_multi_remove_handle($this->curlMultiHandle, $handle); goto QNS9X; ullMD: $body = substr($responseStr, $headerSize); goto dNGOP; HFqK0: $response->statusCode = curl_getinfo($handle, CURLINFO_HTTP_CODE); goto PwMBp; BkCFz: } private function resetCurl($handle) { goto fDGg5; rl0X8: curl_setopt($handler, CURLOPT_POSTFIELDS, array()); goto zSp90; usaN_: curl_setopt($handler, CURLOPT_HTTPHEADER, array()); goto rl0X8; gSvQF: iteJE: goto ZdeVu; nmCiS: goto t0HwC; goto gSvQF; UIy73: curl_setopt($handler, CURLOPT_SSL_VERIFYPEER, false); goto Cgv3J; fDGg5: if (function_exists("\x63\x75\162\x6c\x5f\162\145\163\145\164")) { goto iteJE; } goto dHTJB; dHTJB: curl_setopt($handler, CURLOPT_URL, ''); goto usaN_; Cgv3J: curl_setopt($handler, CURLOPT_SSL_VERIFYHOST, 0); goto nmCiS; rRI9z: t0HwC: goto BLGyh; ZdeVu: curl_reset($handle); goto rRI9z; zSp90: curl_setopt($handler, CURLOPT_TIMEOUT, 0); goto UIy73; BLGyh: } } goto V1T3Q; fE6F_: $json = json_encode($xml); goto N2QaM; a4ii7: class DefaultProfile implements IClientProfile { private static $profile; private static $endpoints; private static $credential; private static $regionId; private static $acceptFormat; private static $isigner; private static $iCredential; private function __construct($regionId, $credential) { self::$regionId = $regionId; self::$credential = $credential; } public static function getProfile($regionId, $accessKeyId, $accessSecret) { goto dciLx; CqzLT: return self::$profile; goto teH_K; dciLx: $credential = new Credential($accessKeyId, $accessSecret); goto xaqCY; xaqCY: self::$profile = new DefaultProfile($regionId, $credential); goto CqzLT; teH_K: } public function getSigner() { goto LBHUk; LBHUk: if (!(null == self::$isigner)) { goto Jax7g; } goto bXzFw; u_JBx: return self::$isigner; goto C9CQY; bXzFw: self::$isigner = new ShaHmac1Signer(); goto UCnLV; UCnLV: Jax7g: goto u_JBx; C9CQY: } public function getRegionId() { return self::$regionId; } public function getFormat() { return self::$acceptFormat; } public function getCredential() { goto mPhTm; hJeBr: self::$credential = self::$iCredential; goto QJrO8; V12qp: return self::$credential; goto IcaCV; mPhTm: if (!(null == self::$credential && null != self::$iCredential)) { goto vWWv9; } goto hJeBr; QJrO8: vWWv9: goto V12qp; IcaCV: } public static function getEndpoints() { goto FKmXN; ebUAT: return self::$endpoints; goto OYAgU; TeHMr: self::$endpoints = EndpointProvider::getEndpoints(); goto XuOI4; FKmXN: if (!(null == self::$endpoints)) { goto q1Mm4; } goto TeHMr; XuOI4: q1Mm4: goto ebUAT; OYAgU: } public static function addEndpoint($endpointName, $regionId, $product, $domain) { goto ZcYtV; FaqT2: Q69HT: goto WF_AM; OVfV4: self::$endpoints = self::getEndpoints(); goto DStrR; WcyKS: $endpoint = self::findEndpointByName($endpointName); goto b3i4b; ZcYtV: if (!(null == self::$endpoints)) { goto rOmUm; } goto OVfV4; fIrOm: self::updateEndpoint($regionId, $product, $domain, $endpoint); goto wjEaz; b3i4b: if (null == $endpoint) { goto Q69HT; } goto fIrOm; DStrR: rOmUm: goto WcyKS; wjEaz: goto e9Q1X; goto FaqT2; paLW2: e9Q1X: goto MElEX; WF_AM: self::addEndpoint_($endpointName, $regionId, $product, $domain); goto paLW2; MElEX: } public static function findEndpointByName($endpointName) { foreach (self::$endpoints as $key => $endpoint) { goto YCH2Y; do7rw: oJvXl: goto ixN51; ixN51: y2RfJ: goto HG1dx; YCH2Y: if (!($endpoint->getName() == $endpointName)) { goto oJvXl; } goto ijNHc; ijNHc: return $endpoint; goto do7rw; HG1dx: } LpEzn: } private static function addEndpoint_($endpointName, $regionId, $product, $domain) { goto IKXoH; Z1VSq: $endpoint = new Endpoint($endpointName, $regionIds, $productDomains); goto uLb6T; uLb6T: array_push(self::$endpoints, $endpoint); goto F9vQP; IKXoH: $regionIds = array($regionId); goto Pna68; Pna68: $productDomains = array(new ProductDomain($product, $domain)); goto Z1VSq; F9vQP: } private static function updateEndpoint($regionId, $product, $domain, $endpoint) { goto CBi4k; VySRE: if (!(null == self::findProductDomain($productDomains, $product, $domain))) { goto H6Ejv; } goto r5nwM; ghOtk: $endpoint->setProductDomains($productDomains); goto mxft3; OQ7Ma: array_push($regionIds, $regionId); goto AQFgQ; CBi4k: $regionIds = $endpoint->getRegionIds(); goto JLRsl; r5nwM: array_push($productDomains, new ProductDomain($product, $domain)); goto aGjiy; JLRsl: if (in_array($regionId, $regionIds)) { goto OyInM; } goto OQ7Ma; AQFgQ: $endpoint->setRegionIds($regionIds); goto unT74; aGjiy: H6Ejv: goto ghOtk; bw3BB: $productDomains = $endpoint->getProductDomains(); goto VySRE; unT74: OyInM: goto bw3BB; mxft3: } private static function findProductDomain($productDomains, $product, $domain) { goto qDfko; S5wVS: return null; goto Yrh87; qDfko: foreach ($productDomains as $key => $productDomain) { goto WIYH_; oF3Bd: EEsDG: goto paRc2; WIYH_: if (!($productDomain->getProductName() == $product && $productDomain->getDomainName() == $domain)) { goto EEsDG; } goto vEz4M; paRc2: De9za: goto hGYp5; vEz4M: return $productDomain; goto oF3Bd; hGYp5: } goto E9_Co; E9_Co: GcdY6: goto S5wVS; Yrh87: } } goto ToDTL; yTu9N: $endpoint_filename = dirname(__FILE__) . DIRECTORY_SEPARATOR . "\x65\x6e\x64\x70\x6f\x69\x6e\164\x73\x2e\x78\155\x6c"; goto hMECC; DpoO6: class EndpointProvider { private static $endpoints; public static function findProductDomain($regionId, $product) { goto Onkaz; Onkaz: if (!(null == $regionId || null == $product || null == self::$endpoints)) { goto Jpa3v; } goto fnqh5; Pwe3A: Jpa3v: goto KxxQF; dvLLw: return null; goto DTwFt; KxxQF: foreach (self::$endpoints as $key => $endpoint) { goto KLQMY; HP8IO: wFd2R: goto e3c63; KLQMY: if (!in_array($regionId, $endpoint->getRegionIds())) { goto jhMSU; } goto FEEOW; FEEOW: return self::findProductDomainByProduct($endpoint->getProductDomains(), $product); goto YhVbe; YhVbe: jhMSU: goto HP8IO; e3c63: } goto PbHI4; fnqh5: return null; goto Pwe3A; PbHI4: LL3BA: goto dvLLw; DTwFt: } private static function findProductDomainByProduct($productDomains, $product) { goto h1aCJ; u6ZWd: MNeK2: goto vEH5J; jWDxh: return null; goto lJq2Y; Kh1Bh: Wla1i: goto jWDxh; oDSxF: return null; goto u6ZWd; h1aCJ: if (!(null == $productDomains)) { goto MNeK2; } goto oDSxF; vEH5J: foreach ($productDomains as $key => $productDomain) { goto bprca; I8hmB: YL5c8: goto OGGIL; zBKrv: return $productDomain->getDomainName(); goto kxpPR; kxpPR: st9vV: goto I8hmB; bprca: if (!($product == $productDomain->getProductName())) { goto st9vV; } goto zBKrv; OGGIL: } goto Kh1Bh; lJq2Y: } public static function getEndpoints() { return self::$endpoints; } public static function setEndpoints($endpoints) { self::$endpoints = $endpoints; } } goto PmZVq; ZeZIi: ini_set("\x64\x69\x73\160\154\141\x79\x5f\145\x72\x72\157\162\163", "\x31"); goto ulhUs; Ekvzv: class HttpResponse { public $curlErrorCode; public $curlErrorMessage; public $statusCode; public $headers; public $body; } goto p04Px; Urk5m: interface ISigner { public function getSignatureMethod(); public function getSignatureVersion(); public function signString($source, $accessSecret); } goto nFgH_; gQRo3: lFfQ0: goto KFSrS; uhXk2: class ProductDomain { private $productName; private $domainName; function __construct($product, $domain) { $this->productName = $product; $this->domainName = $domain; } public function getProductName() { return $this->productName; } public function setProductName($productName) { $this->productName = $productName; } public function getDomainName() { return $this->domainName; } public function setDomainName($domainName) { $this->domainName = $domainName; } } goto DpoO6; f_crN: foreach ($json_array["\105\x6e\x64\160\x6f\x69\x6e\164"] as $json_endpoint) { goto T_Dzj; b4NHw: EAh3a: goto GRHo9; XkCgr: oLjbF: goto l3mcc; Qz_AD: $endpoint = new Endpoint($region_ids[0], $region_ids, $product_domains); goto FS1cE; ZHosN: QKtkm: goto wu1bK; UlYAq: $region_ids = array(); goto lgmpI; QDbee: goto QKtkm; goto b4NHw; HXL69: $json_products = $json_endpoint["\120\x72\157\x64\165\143\164\x73"]["\120\162\x6f\x64\165\143\164"]; goto dKWkS; l2TZX: goto UlB6_; goto SvTQv; GRHo9: $products = array(); goto ZHosN; NkFqT: foreach ($products as $product) { goto w_OKz; w_OKz: $product_domain = new ProductDomain($product["\x50\x72\x6f\144\x75\143\164\x4e\141\155\145"], $product["\x44\x6f\155\141\151\x6e\x4e\x61\x6d\145"]); goto ORag7; ORag7: array_push($product_domains, $product_domain); goto zj9Rr; zj9Rr: obJzq: goto tvkQN; tvkQN: } goto tAiAM; tAiAM: dQfE9: goto Qz_AD; FS1cE: array_push($endpoints, $endpoint); goto sAahS; NAEMA: $product_domains = array(); goto NkFqT; mIb8o: wSijg: goto kmqsB; XALoL: hj0_M: goto NAEMA; sAahS: uddEa: goto Ds_Sz; SvTQv: hDCgd: goto msTpZ; dHoBT: $products = $json_products; goto l2TZX; Hqo19: UlB6_: goto QDbee; dKWkS: if (array() === $json_products or !is_array($json_products)) { goto EAh3a; } goto BMQxH; MZgbw: if (!array_key_exists("\x50\162\x6f\144\165\143\x74", $json_endpoint["\120\x72\157\144\165\x63\x74\163"])) { goto STNEj; } goto HXL69; lgmpI: Apsch: goto MZgbw; l3mcc: $region_ids = array($json_region_ids); goto mIb8o; wu1bK: goto hj0_M; goto CD35p; xNKKW: if (!is_array($json_region_ids)) { goto oLjbF; } goto H0fXl; H0fXl: $region_ids = $json_region_ids; goto C1Wcy; kmqsB: goto Apsch; goto l7pUQ; n7Qcv: $products = array(); goto XALoL; C1Wcy: goto wSijg; goto XkCgr; CD35p: STNEj: goto n7Qcv; msTpZ: $products = array($json_products); goto Hqo19; BMQxH: if (array_keys($json_products) !== range(0, count($json_products) - 1)) { goto hDCgd; } goto dHoBT; l7pUQ: xpd3G: goto UlYAq; T_Dzj: if (!array_key_exists("\x52\145\x67\x69\x6f\x6e\111\x64", $json_endpoint["\122\x65\x67\151\x6f\x6e\111\144\x73"])) { goto xpd3G; } goto Swv3w; Swv3w: $json_region_ids = $json_endpoint["\122\145\147\x69\157\156\111\x64\x73"]["\122\x65\147\151\157\156\111\x64"]; goto xNKKW; Ds_Sz: } goto gQRo3; N2QaM: $json_array = json_decode($json, TRUE); goto wa__m; nFgH_: class ShaHmac1Signer implements ISigner { public function signString($source, $accessSecret) { return base64_encode(hash_hmac("\x73\150\x61\61", $source, $accessSecret, true)); } public function getSignatureMethod() { return "\x48\x4d\x41\103\x2d\123\x48\x41\x31"; } public function getSignatureVersion() { return "\61\x2e\60"; } } goto YNA7E; bh22G: define("\x48\x54\x54\x50\137\120\x52\x4f\x58\131\137\x50\x4f\122\124", "\x38\70\70\x38"); goto lhVHz; lhVHz: class HttpRequest { public $timeoutMs; public $url; public $method; public $customHeaders; public $dataToPost; public $userData; } goto Ekvzv; dtvDV: class ClientException extends \Exception { function __construct($errorMessage, $errorCode) { goto ZkFak; Huui7: $this->errorMessage = $errorMessage; goto RIN9o; ZkFak: parent::__construct($errorMessage); goto Huui7; K40Fb: $this->setErrorType("\x43\154\x69\x65\156\164"); goto Lkynd; RIN9o: $this->errorCode = $errorCode; goto K40Fb; Lkynd: } private $errorCode; private $errorMessage; private $errorType; public function getErrorCode() { return $this->errorCode; } public function setErrorCode($errorCode) { $this->errorCode = $errorCode; } public function getErrorMessage() { return $this->errorMessage; } public function setErrorMessage($errorMessage) { $this->errorMessage = $errorMessage; } public function getErrorType() { return $this->errorType; } public function setErrorType($errorType) { $this->errorType = $errorType; } } goto Urk5m; TSAOl: set_time_limit(0); goto aBzWA; mR4rI: class HttpHelper { public static $connectTimeout = 30; public static $readTimeout = 80; public static function curl($url, $httpMethod = "\107\105\124", $postFields = null, $headers = null) { goto yef64; eYcjS: curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($postFields) ? self::getPostHttpBody($postFields) : $postFields); goto HAiLO; Z9v3F: m3xTN: goto wpD69; q0ekg: yD17E: goto y1lAu; IiUg1: curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP); goto Z9v3F; GBldd: nK_n3: goto dhGGR; jIQOX: $httpResponse->setBody(curl_exec($ch)); goto fzVH8; Z6kXU: curl_setopt($ch, CURLOPT_HTTPHEADER, $httpHeaders); goto nQJJR; IgYgp: JMxCf: goto kzByg; lDZ3S: curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, self::$connectTimeout); goto GBldd; y1lAu: if (!(is_array($headers) && 0 < count($headers))) { goto opoMh; } goto ioU2Z; ioU2Z: $httpHeaders = self::getHttpHearders($headers); goto Z6kXU; Nk0Ap: OLhQW: goto r0n2M; YLnte: curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_BASIC); goto SjMkp; QRfWx: curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $httpMethod); goto kkIM1; nygLc: curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); goto tNClI; sxiJ4: $httpResponse = new xcHttpResponse(); goto jIQOX; WMub1: throw new ClientException("\123\145\162\166\145\x72\x20\x75\156\162\145\141\x63\x68\x61\x62\154\145\72\40\x45\162\162\156\157\72\40" . curl_errno($ch) . "\40" . curl_error($ch), "\123\104\113\x2e\x53\x65\x72\x76\x65\162\x55\x6e\x72\145\x61\x63\150\141\x62\154\145"); goto IgYgp; Lgcyv: return $httpResponse; goto xTe4l; SjMkp: curl_setopt($ch, CURLOPT_PROXY, HTTP_PROXY_IP); goto Nnr9Q; cJ6wx: curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); goto eYcjS; dhGGR: if (!(strlen($url) > 5 && strtolower(substr($url, 0, 5)) == "\x68\x74\164\x70\163")) { goto yD17E; } goto nygLc; tLhd1: if (!curl_errno($ch)) { goto JMxCf; } goto WMub1; kzByg: curl_close($ch); goto Lgcyv; yef64: $ch = curl_init(); goto QRfWx; tNClI: curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); goto q0ekg; wpD69: curl_setopt($ch, CURLOPT_URL, $url); goto SXQ5G; KzNxM: curl_setopt($ch, CURLOPT_TIMEOUT, self::$readTimeout); goto Nk0Ap; SXQ5G: curl_setopt($ch, CURLOPT_FAILONERROR, false); goto cJ6wx; fzVH8: $httpResponse->setStatus(curl_getinfo($ch, CURLINFO_HTTP_CODE)); goto tLhd1; kkIM1: if (!ENABLE_HTTP_PROXY) { goto m3xTN; } goto YLnte; Nnr9Q: curl_setopt($ch, CURLOPT_PROXYPORT, HTTP_PROXY_PORT); goto IiUg1; nQJJR: opoMh: goto sxiJ4; HAiLO: if (!self::$readTimeout) { goto OLhQW; } goto KzNxM; r0n2M: if (!self::$connectTimeout) { goto nK_n3; } goto lDZ3S; xTe4l: } static function getPostHttpBody($postFildes) { goto BiUz9; XWCAD: return substr($content, 0, -1); goto NZGw3; BiUz9: $content = ''; goto yY4qJ; gutfb: swTqB: goto XWCAD; yY4qJ: foreach ($postFildes as $apiParamKey => $apiParamValue) { $content .= "{$apiParamKey}\75" . urlencode($apiParamValue) . "\x26"; yHBQ_: } goto gutfb; NZGw3: } static function getHttpHearders($headers) { goto qELjz; GcoMQ: foreach ($headers as $key => $value) { array_push($httpHeader, $key . "\72" . $value); hOyGK: } goto iy288; iy288: oy7y1: goto hkhsH; hkhsH: return $httpHeader; goto yCamZ; qELjz: $httpHeader = array(); goto GcoMQ; yCamZ: } } goto dtvDV; ToDTL: abstract class AcsRequest { protected $version; protected $product; protected $actionName; protected $regionId; protected $acceptFormat; protected $method; protected $protocolType = "\150\x74\164\x70"; protected $content; protected $queryParameters = array(); protected $headers = array(); function __construct($product, $version, $actionName) { goto gLAtb; gLAtb: $this->headers["\x78\55\163\x64\153\x2d\143\x6c\x69\x65\156\164"] = "\x70\x68\160\x2f\62\56\x30\x2e\60"; goto Js96E; Js96E: $this->product = $product; goto zenaB; zenaB: $this->version = $version; goto ES2Sg; ES2Sg: $this->actionName = $actionName; goto yt9oD; yt9oD: } public abstract function composeUrl($iSigner, $credential, $domain); public function getVersion() { return $this->version; } public function setVersion($version) { $this->version = $version; } public function getProduct() { return $this->product; } public function setProduct($product) { $this->product = $product; } public function getActionName() { return $this->actionName; } public function setActionName($actionName) { $this->actionName = $actionName; } public function getAcceptFormat() { return $this->acceptFormat; } public function setAcceptFormat($acceptFormat) { $this->acceptFormat = $acceptFormat; } public function getQueryParameters() { return $this->queryParameters; } public function getHeaders() { return $this->headers; } public function getMethod() { return $this->method; } public function setMethod($method) { $this->method = $method; } public function getProtocol() { return $this->protocolType; } public function setProtocol($protocol) { $this->protocolType = $protocol; } public function getRegionId() { return $this->regionId; } public function setRegionId($region) { $this->regionId = $region; } public function getContent() { return $this->content; } public function setContent($content) { $this->content = $content; } public function addHeader($headerKey, $headerValue) { $this->headers[$headerKey] = $headerValue; } } goto Mo2OY; Mo2OY: abstract class RpcAcsRequest extends AcsRequest { private $dateTimeFormat = "\x59\55\155\55\x64\134\x54\110\72\x69\x3a\x73\x5c\x5a"; private $domainParameters = array(); function __construct($product, $version, $actionName) { parent::__construct($product, $version, $actionName); $this->initialize(); } private function initialize() { $this->setMethod("\x47\x45\x54"); $this->setAcceptFormat("\x4a\x53\117\x4e"); } private function prepareValue($value) { goto Wn0Nl; Wn0Nl: if (is_bool($value)) { goto MoVPK; } goto FSD0J; jIaio: if ($value) { goto syXM6; } goto NnOad; UfkZ7: dK3kz: goto FNPtb; dhXy0: syXM6: goto brlAt; FSD0J: return $value; goto aDM7p; FNPtb: opeQn: goto G6d_u; aDM7p: goto opeQn; goto uH_7r; NnOad: return "\x66\x61\154\163\145"; goto ljb40; brlAt: return "\164\x72\165\x65"; goto UfkZ7; ljb40: goto dK3kz; goto dhXy0; uH_7r: MoVPK: goto jIaio; G6d_u: } public function composeUrl($iSigner, $credential, $domain) { goto c_z95; goG1_: GIwLp: goto IhAZG; DElbH: $apiParams["\x41\x63\143\145\x73\x73\113\x65\171\x49\x64"] = $credential->getAccessKeyId(); goto PA7OB; o9koz: foreach ($apiParams as $apiParamKey => $apiParamValue) { $this->putDomainParameters($apiParamKey, $apiParamValue); Dkqu0: } goto g9Ob9; YpSsR: foreach ($apiParams as $key => $value) { $apiParams[$key] = $this->prepareValue($value); DtrlV: } goto trBuY; c_z95: $apiParams = parent::getQueryParameters(); goto YpSsR; qMxA_: foreach ($apiParams as $apiParamKey => $apiParamValue) { $requestUrl .= "{$apiParamKey}\75" . urlencode($apiParamValue) . "\x26"; zeQML: } goto goG1_; DH0Iq: $apiParams["\x52\x65\x67\151\157\x6e\111\144"] = $this->getRegionId(); goto DElbH; ZfVlK: $apiParams["\x41\x63\164\x69\157\156"] = $this->getActionName(); goto HpasX; PA7OB: $apiParams["\x46\157\x72\x6d\141\164"] = $this->getAcceptFormat(); goto B7kPG; g9Ob9: iLo2k: goto XtaaP; trBuY: Bg1Je: goto DH0Iq; kYsB3: $apiParams["\123\x69\147\x6e\x61\x74\x75\162\145\x4e\x6f\156\143\x65"] = uniqid(mt_rand(0, 0xffff), true); goto hy8R4; GZm3G: pGv8y: goto MrkFJ; NMtuE: $apiParams["\x53\151\x67\156\141\x74\165\x72\145"] = $this->computeSignature($apiParams, $credential->getAccessSecret(), $iSigner); goto SQQSC; HpasX: $apiParams["\x56\145\x72\x73\x69\157\x6e"] = $this->getVersion(); goto NMtuE; B7kPG: $apiParams["\123\x69\147\x6e\141\x74\x75\162\145\115\x65\x74\x68\157\144"] = $iSigner->getSignatureMethod(); goto kUV3d; IhAZG: return substr($requestUrl, 0, -1); goto r7V4a; XtaaP: return $requestUrl; goto GZm3G; SQQSC: if (parent::getMethod() == "\x50\117\123\124") { goto CWNXS; } goto V8Wk2; jY5gc: $requestUrl = $this->getProtocol() . "\x3a\x2f\x2f" . $domain . "\x2f"; goto o9koz; v1lQA: $apiParams["\124\151\155\x65\x73\x74\x61\x6d\x70"] = date($this->dateTimeFormat); goto ZfVlK; r7V4a: goto pGv8y; goto RYB14; RYB14: CWNXS: goto jY5gc; kUV3d: $apiParams["\x53\151\147\x6e\x61\x74\165\x72\x65\x56\x65\162\x73\x69\x6f\x6e"] = $iSigner->getSignatureVersion(); goto kYsB3; V8Wk2: $requestUrl = $this->getProtocol() . "\x3a\57\x2f" . $domain . "\x2f\77"; goto qMxA_; hy8R4: date_default_timezone_set("\107\115\124"); goto v1lQA; MrkFJ: } private function computeSignature($parameters, $accessKeySecret, $iSigner) { goto OD5Li; OD5Li: ksort($parameters); goto J4SFc; ClNw_: $stringToSign = parent::getMethod() . "\x26\x25\62\106\x26" . $this->percentencode(substr($canonicalizedQueryString, 1)); goto H2nR4; AQv1K: return $signature; goto HomtO; P7b1G: oNGF_: goto ClNw_; H2nR4: $signature = $iSigner->signString($stringToSign, $accessKeySecret . "\46"); goto AQv1K; Ptgqs: foreach ($parameters as $key => $value) { $canonicalizedQueryString .= "\x26" . $this->percentEncode($key) . "\75" . $this->percentEncode($value); BUJvt: } goto P7b1G; J4SFc: $canonicalizedQueryString = ''; goto Ptgqs; HomtO: } protected function percentEncode($str) { goto Dlhmi; ow_NF: return $res; goto eUXyu; Td5ng: $res = preg_replace("\x2f\x25\67\x45\57", "\176", $res); goto ow_NF; jRmS1: $res = preg_replace("\57\134\53\57", "\x25\62\60", $res); goto yP6kY; Dlhmi: $res = urlencode($str); goto jRmS1; yP6kY: $res = preg_replace("\57\x5c\x2a\x2f", "\x25\62\x41", $res); goto Td5ng; eUXyu: } public function getDomainParameter() { return $this->domainParameters; } public function putDomainParameters($name, $value) { $this->domainParameters[$name] = $value; } } goto Gaodj; RQrDZ: interface IClientProfile { public function getSigner(); public function getRegionId(); public function getFormat(); public function getCredential(); } goto a4ii7; hEc8e: error_reporting(E_ALL); goto ZeZIi; KFSrS: EndpointProvider::setEndpoints($endpoints);